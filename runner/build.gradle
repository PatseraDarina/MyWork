javaProject()

//Configuration for Spring REST Docs

buildscript {
    ext {
        springBootVersion = "1.5.9.RELEASE"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
    }
}

configurations {
    jsondoclet
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

apply plugin: "org.asciidoctor.convert"
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: "jacoco"
apply plugin: 'com.palantir.docker'
apply plugin: "com.palantir.docker-run"


checkstyle {
    toolVersion "8.8"
    ignoreFailures = false
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}
pmd {
    toolVersion = '6.0.0'
    ignoreFailures = false
    targetJdk = '1.7'
    sourceSets = [sourceSets.main]
    reportsDir = file("${project.buildDir}/reports/pmd")
    ruleSetFiles = files("/config/pmd/pmd-ruleset.xml")
}
findbugs {
    ignoreFailures = false
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    excludeFilter = file("config/findbugs/excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.github.docker-java:docker-java:3.0.13')

    //need for docker library
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'

    testCompile group: 'capital.scalable', name: 'spring-auto-restdocs-core', version: '1.0.11'
    jsondoclet group: 'capital.scalable', name: 'spring-auto-restdocs-json-doclet', version: '1.0.11'
    testCompile "com.jayway.jsonpath:json-path-assert"
    testCompile "org.springframework.restdocs:spring-restdocs-core:1.2.3.RELEASE"
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:1.2.3.RELEASE"
}

task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir

    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir
    outputs.dir snippetsDir

    dependsOn jsonDoclet

    jacoco {
        append = false
        destinationFile = file("$buildDir/reports/jacoco/jacocoTest.exec")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

asciidoctor {
    sourceDir = file("src/main/asciidoc")
    outputDir = file("$buildDir/generated-docs")
    options backend: "html", doctype: "book"
    attributes "source-highlighter": "highlightjs", "snippets": snippetsDir

    dependsOn test
}

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
}
jacoco {
    toolVersion = '0.7.9'
    reportsDir = file("${buildDir}/reports/jacoco/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        csv.enabled = false
        xml.enabled = true
        html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                    'com/epam/autograder/runner/entity/**'
            )
        })
    }
}

check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport

docker {
    name "${project.group}/${jar.baseName}:${version}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

dockerRun {
    name "${jar.baseName}"
    image "${project.group}/${jar.baseName}:${version}"
    command 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', 'app.jar'
    ports '8080'
}
