javaProject()

clean.execute()

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.7.RELEASE")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.2")
        classpath("org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16")
        classpath('de.aaschmid:gradle-cpd-plugin:1.0')
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.17.2')
        classpath('org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4')
    }
}

configurations {
    jsondoclet
}
ext {
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
    snippetsDir = file("$buildDir/generated-snippets")
}

// a Gradle plugin that uses Asciidoctor via JRuby to process AsciiDoc source files within the project
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'war'
apply plugin: 'com.palantir.docker'
apply plugin: "com.palantir.docker-run"
apply plugin: 'org.junit.platform.gradle.plugin'

apply from: "/gradle/jacoco/jacoco.gradle"
apply from: "/gradle/checkstyle/checkstyle.gradle"
apply from: "/gradle/pmd/pmd.gradle"
apply from: "/gradle/findbugs/findbugs.gradle"
apply from: "/gradle/cpd/cpd.gradle"


dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter:1.5.10.RELEASE')
    compile 'org.jetbrains.xodus:xodus-openAPI:1.1.0'
    compile('org.jetbrains.xodus:xodus-environment:1.1.0')
    compile('org.jetbrains.xodus:xodus-entity-store:1.1.0')

    runtime('org.hsqldb:hsqldb')
    runtime('org.postgresql:postgresql')

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile('org.junit.jupiter:junit-jupiter-api:5.0.1')
    // dependency for REST docs test
    testCompile('capital.scalable:spring-auto-restdocs-core:1.0.11')
    jsondoclet "capital.scalable:spring-auto-restdocs-json-doclet:1.0.11"
    testCompile('org.springframework.restdocs:spring-restdocs-core:2.0.0.RELEASE')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc:2.0.0.RELEASE')

    testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')

    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.1')
    testRuntime('org.junit.vintage:junit-vintage-engine:4.12.1')
    testRuntime('org.junit.platform:junit-platform-launcher:1.0.1')
    testRuntime('org.junit.platform:junit-platform-runner:1.0.1')
}

repositories {
    mavenLocal()
    maven { url 'https://repo.spring.io/libs-snapshot' }
    mavenCentral()
}

//----- START Configuration Spring REST Docs
task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    // the source for this task, after the include and exclude patterns have been applied. Ignores source files which do not exist
    // TO DO need packages core and controller
    source = sourceSets.main.allJava
    // the classpath to use to resolve type references in the source code
    classpath = sourceSets.main.compileClasspath
    // the directory to generate the documentation into path
    destinationDir = javadocJsonDir
    // set path to doclet
    options.docletpath = configurations.jsondoclet.files.asType(List)
    // resource for exporting JavaDoc to JSON for Spring Auto REST Docs
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    // works level
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir
    outputs.dir snippetsDir

    dependsOn jsonDoclet
}

asciidoctor {
    // path where the asciidoc sources are
    sourceDir = file("src/main/asciidoc")
    // path where generated docs go
    outputDir = file("$buildDir/generated-docs")
    // a Map specifying different options that can be sent to Asciidoctor
    options backend: "html, pdf", doctype: "book"
    // a Map specifying various document attributes that can be sent to Asciidoctor
    attributes "source-highlighter": "highlightjs", "snippets": snippetsDir

    dependsOn test
}
//----- END Configuration Spring REST Docs

jar {
    dependsOn asciidoctor
    // put genereted file with documentation to current path
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

build.finalizedBy asciidoctor

//START Docker configuration

//building and pushing docker images
docker {
    //name for use a container, may include a tag
    name "${project.group}/${jar.baseName}:${version}"
    //(optional) an argument list of files to be included in the Docker build context
    files jar.archivePath
    //an argument map of string to string which will set --build-arg arguments to the docker build command
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

//tasks for starting, stopping, statusing and cleaning up a named container
dockerRun {
    //name for use a container, may include a tag
    name "${jar.baseName}"
    //name of the image
    image "${project.group}/${jar.baseName}:${version}"
    //applications port
    ports '8080'
}
//END Docker configuration


